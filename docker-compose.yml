version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ai-receptionist-db
    environment:
      POSTGRES_DB: ai_receptionist
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: dev
    container_name: ai-receptionist-web
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_receptionist?schema=public
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - ELEVEN_API_KEY=${ELEVEN_API_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - AGENT_WEBHOOK_URL=${AGENT_WEBHOOK_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Python LiveKit Voice Agent (Primary)
  python-agent:
    build:
      context: ./python-agent
      dockerfile: Dockerfile
      target: dev
    container_name: ai-receptionist-python-agent
    ports:
      - "8080:8080" # Expose webhook server port
    depends_on:
      - web
    env_file:
      - .env
    environment:
      - BACKEND_API_URL=http://web:3000
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - ELEVEN_API_KEY=${ELEVEN_API_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - WEBHOOK_PORT=8080
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD}
      - AGENT_NAME=${AGENT_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./python-agent:/app
    command: python voice_agent.py dev

  # Database Admin Interface (Optional)
  adminer:
    image: adminer
    container_name: ai-receptionist-adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

volumes:
  postgres_data:
